// Code generated by http://github.com/gojuno/minimock (v3.3.13). DO NOT EDIT.

package scan

//go:generate minimock -i github.com/unhandled-exception/sophiadb/internal/pkg/scan.Plan -o plan_mock_test.go -n PlanMock -p scan

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PlanMock implements Plan
type PlanMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDistinctValues          func(s1 string) (i1 int64, b1 bool)
	inspectFuncDistinctValues   func(s1 string)
	afterDistinctValuesCounter  uint64
	beforeDistinctValuesCounter uint64
	DistinctValuesMock          mPlanMockDistinctValues
}

// NewPlanMock returns a mock for Plan
func NewPlanMock(t minimock.Tester) *PlanMock {
	m := &PlanMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DistinctValuesMock = mPlanMockDistinctValues{mock: m}
	m.DistinctValuesMock.callArgs = []*PlanMockDistinctValuesParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPlanMockDistinctValues struct {
	optional           bool
	mock               *PlanMock
	defaultExpectation *PlanMockDistinctValuesExpectation
	expectations       []*PlanMockDistinctValuesExpectation

	callArgs []*PlanMockDistinctValuesParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// PlanMockDistinctValuesExpectation specifies expectation struct of the Plan.DistinctValues
type PlanMockDistinctValuesExpectation struct {
	mock      *PlanMock
	params    *PlanMockDistinctValuesParams
	paramPtrs *PlanMockDistinctValuesParamPtrs
	results   *PlanMockDistinctValuesResults
	Counter   uint64
}

// PlanMockDistinctValuesParams contains parameters of the Plan.DistinctValues
type PlanMockDistinctValuesParams struct {
	s1 string
}

// PlanMockDistinctValuesParamPtrs contains pointers to parameters of the Plan.DistinctValues
type PlanMockDistinctValuesParamPtrs struct {
	s1 *string
}

// PlanMockDistinctValuesResults contains results of the Plan.DistinctValues
type PlanMockDistinctValuesResults struct {
	i1 int64
	b1 bool
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDistinctValues *mPlanMockDistinctValues) Optional() *mPlanMockDistinctValues {
	mmDistinctValues.optional = true
	return mmDistinctValues
}

// Expect sets up expected params for Plan.DistinctValues
func (mmDistinctValues *mPlanMockDistinctValues) Expect(s1 string) *mPlanMockDistinctValues {
	if mmDistinctValues.mock.funcDistinctValues != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by Set")
	}

	if mmDistinctValues.defaultExpectation == nil {
		mmDistinctValues.defaultExpectation = &PlanMockDistinctValuesExpectation{}
	}

	if mmDistinctValues.defaultExpectation.paramPtrs != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by ExpectParams functions")
	}

	mmDistinctValues.defaultExpectation.params = &PlanMockDistinctValuesParams{s1}
	for _, e := range mmDistinctValues.expectations {
		if minimock.Equal(e.params, mmDistinctValues.defaultExpectation.params) {
			mmDistinctValues.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDistinctValues.defaultExpectation.params)
		}
	}

	return mmDistinctValues
}

// ExpectS1Param1 sets up expected param s1 for Plan.DistinctValues
func (mmDistinctValues *mPlanMockDistinctValues) ExpectS1Param1(s1 string) *mPlanMockDistinctValues {
	if mmDistinctValues.mock.funcDistinctValues != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by Set")
	}

	if mmDistinctValues.defaultExpectation == nil {
		mmDistinctValues.defaultExpectation = &PlanMockDistinctValuesExpectation{}
	}

	if mmDistinctValues.defaultExpectation.params != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by Expect")
	}

	if mmDistinctValues.defaultExpectation.paramPtrs == nil {
		mmDistinctValues.defaultExpectation.paramPtrs = &PlanMockDistinctValuesParamPtrs{}
	}
	mmDistinctValues.defaultExpectation.paramPtrs.s1 = &s1

	return mmDistinctValues
}

// Inspect accepts an inspector function that has same arguments as the Plan.DistinctValues
func (mmDistinctValues *mPlanMockDistinctValues) Inspect(f func(s1 string)) *mPlanMockDistinctValues {
	if mmDistinctValues.mock.inspectFuncDistinctValues != nil {
		mmDistinctValues.mock.t.Fatalf("Inspect function is already set for PlanMock.DistinctValues")
	}

	mmDistinctValues.mock.inspectFuncDistinctValues = f

	return mmDistinctValues
}

// Return sets up results that will be returned by Plan.DistinctValues
func (mmDistinctValues *mPlanMockDistinctValues) Return(i1 int64, b1 bool) *PlanMock {
	if mmDistinctValues.mock.funcDistinctValues != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by Set")
	}

	if mmDistinctValues.defaultExpectation == nil {
		mmDistinctValues.defaultExpectation = &PlanMockDistinctValuesExpectation{mock: mmDistinctValues.mock}
	}
	mmDistinctValues.defaultExpectation.results = &PlanMockDistinctValuesResults{i1, b1}
	return mmDistinctValues.mock
}

// Set uses given function f to mock the Plan.DistinctValues method
func (mmDistinctValues *mPlanMockDistinctValues) Set(f func(s1 string) (i1 int64, b1 bool)) *PlanMock {
	if mmDistinctValues.defaultExpectation != nil {
		mmDistinctValues.mock.t.Fatalf("Default expectation is already set for the Plan.DistinctValues method")
	}

	if len(mmDistinctValues.expectations) > 0 {
		mmDistinctValues.mock.t.Fatalf("Some expectations are already set for the Plan.DistinctValues method")
	}

	mmDistinctValues.mock.funcDistinctValues = f
	return mmDistinctValues.mock
}

// When sets expectation for the Plan.DistinctValues which will trigger the result defined by the following
// Then helper
func (mmDistinctValues *mPlanMockDistinctValues) When(s1 string) *PlanMockDistinctValuesExpectation {
	if mmDistinctValues.mock.funcDistinctValues != nil {
		mmDistinctValues.mock.t.Fatalf("PlanMock.DistinctValues mock is already set by Set")
	}

	expectation := &PlanMockDistinctValuesExpectation{
		mock:   mmDistinctValues.mock,
		params: &PlanMockDistinctValuesParams{s1},
	}
	mmDistinctValues.expectations = append(mmDistinctValues.expectations, expectation)
	return expectation
}

// Then sets up Plan.DistinctValues return parameters for the expectation previously defined by the When method
func (e *PlanMockDistinctValuesExpectation) Then(i1 int64, b1 bool) *PlanMock {
	e.results = &PlanMockDistinctValuesResults{i1, b1}
	return e.mock
}

// Times sets number of times Plan.DistinctValues should be invoked
func (mmDistinctValues *mPlanMockDistinctValues) Times(n uint64) *mPlanMockDistinctValues {
	if n == 0 {
		mmDistinctValues.mock.t.Fatalf("Times of PlanMock.DistinctValues mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDistinctValues.expectedInvocations, n)
	return mmDistinctValues
}

func (mmDistinctValues *mPlanMockDistinctValues) invocationsDone() bool {
	if len(mmDistinctValues.expectations) == 0 && mmDistinctValues.defaultExpectation == nil && mmDistinctValues.mock.funcDistinctValues == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDistinctValues.mock.afterDistinctValuesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDistinctValues.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DistinctValues implements Plan
func (mmDistinctValues *PlanMock) DistinctValues(s1 string) (i1 int64, b1 bool) {
	mm_atomic.AddUint64(&mmDistinctValues.beforeDistinctValuesCounter, 1)
	defer mm_atomic.AddUint64(&mmDistinctValues.afterDistinctValuesCounter, 1)

	if mmDistinctValues.inspectFuncDistinctValues != nil {
		mmDistinctValues.inspectFuncDistinctValues(s1)
	}

	mm_params := PlanMockDistinctValuesParams{s1}

	// Record call args
	mmDistinctValues.DistinctValuesMock.mutex.Lock()
	mmDistinctValues.DistinctValuesMock.callArgs = append(mmDistinctValues.DistinctValuesMock.callArgs, &mm_params)
	mmDistinctValues.DistinctValuesMock.mutex.Unlock()

	for _, e := range mmDistinctValues.DistinctValuesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.b1
		}
	}

	if mmDistinctValues.DistinctValuesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDistinctValues.DistinctValuesMock.defaultExpectation.Counter, 1)
		mm_want := mmDistinctValues.DistinctValuesMock.defaultExpectation.params
		mm_want_ptrs := mmDistinctValues.DistinctValuesMock.defaultExpectation.paramPtrs

		mm_got := PlanMockDistinctValuesParams{s1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.s1 != nil && !minimock.Equal(*mm_want_ptrs.s1, mm_got.s1) {
				mmDistinctValues.t.Errorf("PlanMock.DistinctValues got unexpected parameter s1, want: %#v, got: %#v%s\n", *mm_want_ptrs.s1, mm_got.s1, minimock.Diff(*mm_want_ptrs.s1, mm_got.s1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDistinctValues.t.Errorf("PlanMock.DistinctValues got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDistinctValues.DistinctValuesMock.defaultExpectation.results
		if mm_results == nil {
			mmDistinctValues.t.Fatal("No results are set for the PlanMock.DistinctValues")
		}
		return (*mm_results).i1, (*mm_results).b1
	}
	if mmDistinctValues.funcDistinctValues != nil {
		return mmDistinctValues.funcDistinctValues(s1)
	}
	mmDistinctValues.t.Fatalf("Unexpected call to PlanMock.DistinctValues. %v", s1)
	return
}

// DistinctValuesAfterCounter returns a count of finished PlanMock.DistinctValues invocations
func (mmDistinctValues *PlanMock) DistinctValuesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDistinctValues.afterDistinctValuesCounter)
}

// DistinctValuesBeforeCounter returns a count of PlanMock.DistinctValues invocations
func (mmDistinctValues *PlanMock) DistinctValuesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDistinctValues.beforeDistinctValuesCounter)
}

// Calls returns a list of arguments used in each call to PlanMock.DistinctValues.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDistinctValues *mPlanMockDistinctValues) Calls() []*PlanMockDistinctValuesParams {
	mmDistinctValues.mutex.RLock()

	argCopy := make([]*PlanMockDistinctValuesParams, len(mmDistinctValues.callArgs))
	copy(argCopy, mmDistinctValues.callArgs)

	mmDistinctValues.mutex.RUnlock()

	return argCopy
}

// MinimockDistinctValuesDone returns true if the count of the DistinctValues invocations corresponds
// the number of defined expectations
func (m *PlanMock) MinimockDistinctValuesDone() bool {
	if m.DistinctValuesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DistinctValuesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DistinctValuesMock.invocationsDone()
}

// MinimockDistinctValuesInspect logs each unmet expectation
func (m *PlanMock) MinimockDistinctValuesInspect() {
	for _, e := range m.DistinctValuesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PlanMock.DistinctValues with params: %#v", *e.params)
		}
	}

	afterDistinctValuesCounter := mm_atomic.LoadUint64(&m.afterDistinctValuesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DistinctValuesMock.defaultExpectation != nil && afterDistinctValuesCounter < 1 {
		if m.DistinctValuesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PlanMock.DistinctValues")
		} else {
			m.t.Errorf("Expected call to PlanMock.DistinctValues with params: %#v", *m.DistinctValuesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDistinctValues != nil && afterDistinctValuesCounter < 1 {
		m.t.Error("Expected call to PlanMock.DistinctValues")
	}

	if !m.DistinctValuesMock.invocationsDone() && afterDistinctValuesCounter > 0 {
		m.t.Errorf("Expected %d calls to PlanMock.DistinctValues but found %d calls",
			mm_atomic.LoadUint64(&m.DistinctValuesMock.expectedInvocations), afterDistinctValuesCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PlanMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDistinctValuesInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PlanMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PlanMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDistinctValuesDone()
}
