package planner

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/unhandled-exception/sophiadb/pkg/planner.tablePlanMetadataManager -o ./table_plan_metadata_manager_mock_test.go -n TablePlanMetadataManagerMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/unhandled-exception/sophiadb/pkg/metadata"
	"github.com/unhandled-exception/sophiadb/pkg/records"
	"github.com/unhandled-exception/sophiadb/pkg/scan"
)

// TablePlanMetadataManagerMock implements tablePlanMetadataManager
type TablePlanMetadataManagerMock struct {
	t minimock.Tester

	funcGetStatInfo          func(tableName string, layout records.Layout, trx scan.TRXInt) (s1 metadata.StatInfo, err error)
	inspectFuncGetStatInfo   func(tableName string, layout records.Layout, trx scan.TRXInt)
	afterGetStatInfoCounter  uint64
	beforeGetStatInfoCounter uint64
	GetStatInfoMock          mTablePlanMetadataManagerMockGetStatInfo

	funcLayout          func(tableName string, trx scan.TRXInt) (l1 records.Layout, err error)
	inspectFuncLayout   func(tableName string, trx scan.TRXInt)
	afterLayoutCounter  uint64
	beforeLayoutCounter uint64
	LayoutMock          mTablePlanMetadataManagerMockLayout
}

// NewTablePlanMetadataManagerMock returns a mock for tablePlanMetadataManager
func NewTablePlanMetadataManagerMock(t minimock.Tester) *TablePlanMetadataManagerMock {
	m := &TablePlanMetadataManagerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStatInfoMock = mTablePlanMetadataManagerMockGetStatInfo{mock: m}
	m.GetStatInfoMock.callArgs = []*TablePlanMetadataManagerMockGetStatInfoParams{}

	m.LayoutMock = mTablePlanMetadataManagerMockLayout{mock: m}
	m.LayoutMock.callArgs = []*TablePlanMetadataManagerMockLayoutParams{}

	return m
}

type mTablePlanMetadataManagerMockGetStatInfo struct {
	mock               *TablePlanMetadataManagerMock
	defaultExpectation *TablePlanMetadataManagerMockGetStatInfoExpectation
	expectations       []*TablePlanMetadataManagerMockGetStatInfoExpectation

	callArgs []*TablePlanMetadataManagerMockGetStatInfoParams
	mutex    sync.RWMutex
}

// TablePlanMetadataManagerMockGetStatInfoExpectation specifies expectation struct of the tablePlanMetadataManager.GetStatInfo
type TablePlanMetadataManagerMockGetStatInfoExpectation struct {
	mock    *TablePlanMetadataManagerMock
	params  *TablePlanMetadataManagerMockGetStatInfoParams
	results *TablePlanMetadataManagerMockGetStatInfoResults
	Counter uint64
}

// TablePlanMetadataManagerMockGetStatInfoParams contains parameters of the tablePlanMetadataManager.GetStatInfo
type TablePlanMetadataManagerMockGetStatInfoParams struct {
	tableName string
	layout    records.Layout
	trx       scan.TRXInt
}

// TablePlanMetadataManagerMockGetStatInfoResults contains results of the tablePlanMetadataManager.GetStatInfo
type TablePlanMetadataManagerMockGetStatInfoResults struct {
	s1  metadata.StatInfo
	err error
}

// Expect sets up expected params for tablePlanMetadataManager.GetStatInfo
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) Expect(tableName string, layout records.Layout, trx scan.TRXInt) *mTablePlanMetadataManagerMockGetStatInfo {
	if mmGetStatInfo.mock.funcGetStatInfo != nil {
		mmGetStatInfo.mock.t.Fatalf("TablePlanMetadataManagerMock.GetStatInfo mock is already set by Set")
	}

	if mmGetStatInfo.defaultExpectation == nil {
		mmGetStatInfo.defaultExpectation = &TablePlanMetadataManagerMockGetStatInfoExpectation{}
	}

	mmGetStatInfo.defaultExpectation.params = &TablePlanMetadataManagerMockGetStatInfoParams{tableName, layout, trx}
	for _, e := range mmGetStatInfo.expectations {
		if minimock.Equal(e.params, mmGetStatInfo.defaultExpectation.params) {
			mmGetStatInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStatInfo.defaultExpectation.params)
		}
	}

	return mmGetStatInfo
}

// Inspect accepts an inspector function that has same arguments as the tablePlanMetadataManager.GetStatInfo
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) Inspect(f func(tableName string, layout records.Layout, trx scan.TRXInt)) *mTablePlanMetadataManagerMockGetStatInfo {
	if mmGetStatInfo.mock.inspectFuncGetStatInfo != nil {
		mmGetStatInfo.mock.t.Fatalf("Inspect function is already set for TablePlanMetadataManagerMock.GetStatInfo")
	}

	mmGetStatInfo.mock.inspectFuncGetStatInfo = f

	return mmGetStatInfo
}

// Return sets up results that will be returned by tablePlanMetadataManager.GetStatInfo
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) Return(s1 metadata.StatInfo, err error) *TablePlanMetadataManagerMock {
	if mmGetStatInfo.mock.funcGetStatInfo != nil {
		mmGetStatInfo.mock.t.Fatalf("TablePlanMetadataManagerMock.GetStatInfo mock is already set by Set")
	}

	if mmGetStatInfo.defaultExpectation == nil {
		mmGetStatInfo.defaultExpectation = &TablePlanMetadataManagerMockGetStatInfoExpectation{mock: mmGetStatInfo.mock}
	}
	mmGetStatInfo.defaultExpectation.results = &TablePlanMetadataManagerMockGetStatInfoResults{s1, err}
	return mmGetStatInfo.mock
}

//Set uses given function f to mock the tablePlanMetadataManager.GetStatInfo method
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) Set(f func(tableName string, layout records.Layout, trx scan.TRXInt) (s1 metadata.StatInfo, err error)) *TablePlanMetadataManagerMock {
	if mmGetStatInfo.defaultExpectation != nil {
		mmGetStatInfo.mock.t.Fatalf("Default expectation is already set for the tablePlanMetadataManager.GetStatInfo method")
	}

	if len(mmGetStatInfo.expectations) > 0 {
		mmGetStatInfo.mock.t.Fatalf("Some expectations are already set for the tablePlanMetadataManager.GetStatInfo method")
	}

	mmGetStatInfo.mock.funcGetStatInfo = f
	return mmGetStatInfo.mock
}

// When sets expectation for the tablePlanMetadataManager.GetStatInfo which will trigger the result defined by the following
// Then helper
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) When(tableName string, layout records.Layout, trx scan.TRXInt) *TablePlanMetadataManagerMockGetStatInfoExpectation {
	if mmGetStatInfo.mock.funcGetStatInfo != nil {
		mmGetStatInfo.mock.t.Fatalf("TablePlanMetadataManagerMock.GetStatInfo mock is already set by Set")
	}

	expectation := &TablePlanMetadataManagerMockGetStatInfoExpectation{
		mock:   mmGetStatInfo.mock,
		params: &TablePlanMetadataManagerMockGetStatInfoParams{tableName, layout, trx},
	}
	mmGetStatInfo.expectations = append(mmGetStatInfo.expectations, expectation)
	return expectation
}

// Then sets up tablePlanMetadataManager.GetStatInfo return parameters for the expectation previously defined by the When method
func (e *TablePlanMetadataManagerMockGetStatInfoExpectation) Then(s1 metadata.StatInfo, err error) *TablePlanMetadataManagerMock {
	e.results = &TablePlanMetadataManagerMockGetStatInfoResults{s1, err}
	return e.mock
}

// GetStatInfo implements tablePlanMetadataManager
func (mmGetStatInfo *TablePlanMetadataManagerMock) GetStatInfo(tableName string, layout records.Layout, trx scan.TRXInt) (s1 metadata.StatInfo, err error) {
	mm_atomic.AddUint64(&mmGetStatInfo.beforeGetStatInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStatInfo.afterGetStatInfoCounter, 1)

	if mmGetStatInfo.inspectFuncGetStatInfo != nil {
		mmGetStatInfo.inspectFuncGetStatInfo(tableName, layout, trx)
	}

	mm_params := &TablePlanMetadataManagerMockGetStatInfoParams{tableName, layout, trx}

	// Record call args
	mmGetStatInfo.GetStatInfoMock.mutex.Lock()
	mmGetStatInfo.GetStatInfoMock.callArgs = append(mmGetStatInfo.GetStatInfoMock.callArgs, mm_params)
	mmGetStatInfo.GetStatInfoMock.mutex.Unlock()

	for _, e := range mmGetStatInfo.GetStatInfoMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetStatInfo.GetStatInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStatInfo.GetStatInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStatInfo.GetStatInfoMock.defaultExpectation.params
		mm_got := TablePlanMetadataManagerMockGetStatInfoParams{tableName, layout, trx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStatInfo.t.Errorf("TablePlanMetadataManagerMock.GetStatInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStatInfo.GetStatInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStatInfo.t.Fatal("No results are set for the TablePlanMetadataManagerMock.GetStatInfo")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetStatInfo.funcGetStatInfo != nil {
		return mmGetStatInfo.funcGetStatInfo(tableName, layout, trx)
	}
	mmGetStatInfo.t.Fatalf("Unexpected call to TablePlanMetadataManagerMock.GetStatInfo. %v %v %v", tableName, layout, trx)
	return
}

// GetStatInfoAfterCounter returns a count of finished TablePlanMetadataManagerMock.GetStatInfo invocations
func (mmGetStatInfo *TablePlanMetadataManagerMock) GetStatInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStatInfo.afterGetStatInfoCounter)
}

// GetStatInfoBeforeCounter returns a count of TablePlanMetadataManagerMock.GetStatInfo invocations
func (mmGetStatInfo *TablePlanMetadataManagerMock) GetStatInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStatInfo.beforeGetStatInfoCounter)
}

// Calls returns a list of arguments used in each call to TablePlanMetadataManagerMock.GetStatInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStatInfo *mTablePlanMetadataManagerMockGetStatInfo) Calls() []*TablePlanMetadataManagerMockGetStatInfoParams {
	mmGetStatInfo.mutex.RLock()

	argCopy := make([]*TablePlanMetadataManagerMockGetStatInfoParams, len(mmGetStatInfo.callArgs))
	copy(argCopy, mmGetStatInfo.callArgs)

	mmGetStatInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStatInfoDone returns true if the count of the GetStatInfo invocations corresponds
// the number of defined expectations
func (m *TablePlanMetadataManagerMock) MinimockGetStatInfoDone() bool {
	for _, e := range m.GetStatInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStatInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStatInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStatInfo != nil && mm_atomic.LoadUint64(&m.afterGetStatInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStatInfoInspect logs each unmet expectation
func (m *TablePlanMetadataManagerMock) MinimockGetStatInfoInspect() {
	for _, e := range m.GetStatInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TablePlanMetadataManagerMock.GetStatInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStatInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStatInfoCounter) < 1 {
		if m.GetStatInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TablePlanMetadataManagerMock.GetStatInfo")
		} else {
			m.t.Errorf("Expected call to TablePlanMetadataManagerMock.GetStatInfo with params: %#v", *m.GetStatInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStatInfo != nil && mm_atomic.LoadUint64(&m.afterGetStatInfoCounter) < 1 {
		m.t.Error("Expected call to TablePlanMetadataManagerMock.GetStatInfo")
	}
}

type mTablePlanMetadataManagerMockLayout struct {
	mock               *TablePlanMetadataManagerMock
	defaultExpectation *TablePlanMetadataManagerMockLayoutExpectation
	expectations       []*TablePlanMetadataManagerMockLayoutExpectation

	callArgs []*TablePlanMetadataManagerMockLayoutParams
	mutex    sync.RWMutex
}

// TablePlanMetadataManagerMockLayoutExpectation specifies expectation struct of the tablePlanMetadataManager.Layout
type TablePlanMetadataManagerMockLayoutExpectation struct {
	mock    *TablePlanMetadataManagerMock
	params  *TablePlanMetadataManagerMockLayoutParams
	results *TablePlanMetadataManagerMockLayoutResults
	Counter uint64
}

// TablePlanMetadataManagerMockLayoutParams contains parameters of the tablePlanMetadataManager.Layout
type TablePlanMetadataManagerMockLayoutParams struct {
	tableName string
	trx       scan.TRXInt
}

// TablePlanMetadataManagerMockLayoutResults contains results of the tablePlanMetadataManager.Layout
type TablePlanMetadataManagerMockLayoutResults struct {
	l1  records.Layout
	err error
}

// Expect sets up expected params for tablePlanMetadataManager.Layout
func (mmLayout *mTablePlanMetadataManagerMockLayout) Expect(tableName string, trx scan.TRXInt) *mTablePlanMetadataManagerMockLayout {
	if mmLayout.mock.funcLayout != nil {
		mmLayout.mock.t.Fatalf("TablePlanMetadataManagerMock.Layout mock is already set by Set")
	}

	if mmLayout.defaultExpectation == nil {
		mmLayout.defaultExpectation = &TablePlanMetadataManagerMockLayoutExpectation{}
	}

	mmLayout.defaultExpectation.params = &TablePlanMetadataManagerMockLayoutParams{tableName, trx}
	for _, e := range mmLayout.expectations {
		if minimock.Equal(e.params, mmLayout.defaultExpectation.params) {
			mmLayout.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLayout.defaultExpectation.params)
		}
	}

	return mmLayout
}

// Inspect accepts an inspector function that has same arguments as the tablePlanMetadataManager.Layout
func (mmLayout *mTablePlanMetadataManagerMockLayout) Inspect(f func(tableName string, trx scan.TRXInt)) *mTablePlanMetadataManagerMockLayout {
	if mmLayout.mock.inspectFuncLayout != nil {
		mmLayout.mock.t.Fatalf("Inspect function is already set for TablePlanMetadataManagerMock.Layout")
	}

	mmLayout.mock.inspectFuncLayout = f

	return mmLayout
}

// Return sets up results that will be returned by tablePlanMetadataManager.Layout
func (mmLayout *mTablePlanMetadataManagerMockLayout) Return(l1 records.Layout, err error) *TablePlanMetadataManagerMock {
	if mmLayout.mock.funcLayout != nil {
		mmLayout.mock.t.Fatalf("TablePlanMetadataManagerMock.Layout mock is already set by Set")
	}

	if mmLayout.defaultExpectation == nil {
		mmLayout.defaultExpectation = &TablePlanMetadataManagerMockLayoutExpectation{mock: mmLayout.mock}
	}
	mmLayout.defaultExpectation.results = &TablePlanMetadataManagerMockLayoutResults{l1, err}
	return mmLayout.mock
}

//Set uses given function f to mock the tablePlanMetadataManager.Layout method
func (mmLayout *mTablePlanMetadataManagerMockLayout) Set(f func(tableName string, trx scan.TRXInt) (l1 records.Layout, err error)) *TablePlanMetadataManagerMock {
	if mmLayout.defaultExpectation != nil {
		mmLayout.mock.t.Fatalf("Default expectation is already set for the tablePlanMetadataManager.Layout method")
	}

	if len(mmLayout.expectations) > 0 {
		mmLayout.mock.t.Fatalf("Some expectations are already set for the tablePlanMetadataManager.Layout method")
	}

	mmLayout.mock.funcLayout = f
	return mmLayout.mock
}

// When sets expectation for the tablePlanMetadataManager.Layout which will trigger the result defined by the following
// Then helper
func (mmLayout *mTablePlanMetadataManagerMockLayout) When(tableName string, trx scan.TRXInt) *TablePlanMetadataManagerMockLayoutExpectation {
	if mmLayout.mock.funcLayout != nil {
		mmLayout.mock.t.Fatalf("TablePlanMetadataManagerMock.Layout mock is already set by Set")
	}

	expectation := &TablePlanMetadataManagerMockLayoutExpectation{
		mock:   mmLayout.mock,
		params: &TablePlanMetadataManagerMockLayoutParams{tableName, trx},
	}
	mmLayout.expectations = append(mmLayout.expectations, expectation)
	return expectation
}

// Then sets up tablePlanMetadataManager.Layout return parameters for the expectation previously defined by the When method
func (e *TablePlanMetadataManagerMockLayoutExpectation) Then(l1 records.Layout, err error) *TablePlanMetadataManagerMock {
	e.results = &TablePlanMetadataManagerMockLayoutResults{l1, err}
	return e.mock
}

// Layout implements tablePlanMetadataManager
func (mmLayout *TablePlanMetadataManagerMock) Layout(tableName string, trx scan.TRXInt) (l1 records.Layout, err error) {
	mm_atomic.AddUint64(&mmLayout.beforeLayoutCounter, 1)
	defer mm_atomic.AddUint64(&mmLayout.afterLayoutCounter, 1)

	if mmLayout.inspectFuncLayout != nil {
		mmLayout.inspectFuncLayout(tableName, trx)
	}

	mm_params := &TablePlanMetadataManagerMockLayoutParams{tableName, trx}

	// Record call args
	mmLayout.LayoutMock.mutex.Lock()
	mmLayout.LayoutMock.callArgs = append(mmLayout.LayoutMock.callArgs, mm_params)
	mmLayout.LayoutMock.mutex.Unlock()

	for _, e := range mmLayout.LayoutMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.l1, e.results.err
		}
	}

	if mmLayout.LayoutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLayout.LayoutMock.defaultExpectation.Counter, 1)
		mm_want := mmLayout.LayoutMock.defaultExpectation.params
		mm_got := TablePlanMetadataManagerMockLayoutParams{tableName, trx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLayout.t.Errorf("TablePlanMetadataManagerMock.Layout got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLayout.LayoutMock.defaultExpectation.results
		if mm_results == nil {
			mmLayout.t.Fatal("No results are set for the TablePlanMetadataManagerMock.Layout")
		}
		return (*mm_results).l1, (*mm_results).err
	}
	if mmLayout.funcLayout != nil {
		return mmLayout.funcLayout(tableName, trx)
	}
	mmLayout.t.Fatalf("Unexpected call to TablePlanMetadataManagerMock.Layout. %v %v", tableName, trx)
	return
}

// LayoutAfterCounter returns a count of finished TablePlanMetadataManagerMock.Layout invocations
func (mmLayout *TablePlanMetadataManagerMock) LayoutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLayout.afterLayoutCounter)
}

// LayoutBeforeCounter returns a count of TablePlanMetadataManagerMock.Layout invocations
func (mmLayout *TablePlanMetadataManagerMock) LayoutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLayout.beforeLayoutCounter)
}

// Calls returns a list of arguments used in each call to TablePlanMetadataManagerMock.Layout.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLayout *mTablePlanMetadataManagerMockLayout) Calls() []*TablePlanMetadataManagerMockLayoutParams {
	mmLayout.mutex.RLock()

	argCopy := make([]*TablePlanMetadataManagerMockLayoutParams, len(mmLayout.callArgs))
	copy(argCopy, mmLayout.callArgs)

	mmLayout.mutex.RUnlock()

	return argCopy
}

// MinimockLayoutDone returns true if the count of the Layout invocations corresponds
// the number of defined expectations
func (m *TablePlanMetadataManagerMock) MinimockLayoutDone() bool {
	for _, e := range m.LayoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LayoutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLayoutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLayout != nil && mm_atomic.LoadUint64(&m.afterLayoutCounter) < 1 {
		return false
	}
	return true
}

// MinimockLayoutInspect logs each unmet expectation
func (m *TablePlanMetadataManagerMock) MinimockLayoutInspect() {
	for _, e := range m.LayoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TablePlanMetadataManagerMock.Layout with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LayoutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLayoutCounter) < 1 {
		if m.LayoutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TablePlanMetadataManagerMock.Layout")
		} else {
			m.t.Errorf("Expected call to TablePlanMetadataManagerMock.Layout with params: %#v", *m.LayoutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLayout != nil && mm_atomic.LoadUint64(&m.afterLayoutCounter) < 1 {
		m.t.Error("Expected call to TablePlanMetadataManagerMock.Layout")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TablePlanMetadataManagerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetStatInfoInspect()

		m.MinimockLayoutInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TablePlanMetadataManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TablePlanMetadataManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStatInfoDone() &&
		m.MinimockLayoutDone()
}
